#include "Error.huff"

#define macro OPCODE(op) = takes(0) returns(0) {
        pop
        <op>
        0x1
}

#define macro OPCODE_CONST(op, arg) = takes(0) returns(0) {
        pop
        <arg>
        <op>
        0x1
}

#define macro OPCODE_STACK_TWO(op) = takes(0) returns(0) {
        pop
        swap2 swap1
        <op>
        0x1
}

#define macro OPCODE_STACK_TWO_REVERSE(op) = takes(0) returns(0) {
        pop
        swap2
        <op>
        0x1
}


#define macro OPCODE_CMP_REVERT(op, exitlabel) = takes(0) returns(0) {
        pop
        swap2 swap1
        <op> 

        iszero not_ok jumpi
        //dup1 0x0 mstore 0x20 0x0 revert
        0x1
        0x1
        <exitlabel> jump
        not_ok:
}

#define macro OPCODE_CMP_NOT_REVERT(op, exitlabel) = takes(0) returns(0) {
        pop
        swap2 swap1
        <op> not_ok jumpi
        0x1
        0x1
        <exitlabel> jump
        not_ok:
}

#define macro OPCODE_ISZERO_REVERT(exitlabel) = takes(0) returns(0) {
        pop
        swap1
        //iszero 
        not_ok jumpi
        //dup1 0x0 mstore 0x20 0x0 revert
        0x1
        0x1
        <exitlabel> jump
        not_ok:
}


#define macro OPCODE_ISZERO_NOT_REVERT(exitlabel) = takes(0) returns(0) {
        pop
        swap1
        iszero not_ok jumpi
        0x1
        0x1
        <exitlabel> jump
        not_ok:
}


#define macro OPCODE_STACK_ONE(op) = takes(0) returns(0) {
        pop
        swap1
        <op>
        0x1
}


#define macro OPCODE_STACK_ARG8(op) = takes(0) returns(0) {
        pop // [offset, ..stack]
        dup1 0x1 add mload 0xF8 shr // [arg, offset, ..stack]
        swap1 // [offset, arg, ..stack]
        swap2 // [value, arg, offset, ..stack]
        
        swap1
        <op>
        0x2
}

#define macro OPCODE_STACK_CONST(op, const) = takes(0) returns(0) {
        pop // [offset, ..stack]
        swap1 // [value, offset, ..stack]
        <const> // [const, value, offset, ..stack]
        swap1 // [value, const offset, ..stack]
        <op>
        0x1
}

#define macro OPCODE_LOAD_CONST(size, mask) = takes(0) returns(0) {
        pop
        dup1 0x1 add mload
        <mask> and
        <size>
}



#define macro DO_CALCULATIONS() = takes(1) returns(1) {
      //[offset]
      //dup1 //[offset, offset]
      start:
      dup1 mload 
      0xF8 shr //[opcode, offset]
      
      dup1 iszero exitvmop jumpi

      0x10 dup2 gt ops10 jumpi
      
      dup1 0x1 eq op1 jumpi 
      dup1 0x2 eq op2 jumpi 
      dup1 0x3 eq op3 jumpi 
      dup1 0x4 eq op4 jumpi 
      dup1 0x5 eq op5 jumpi 
      dup1 0x6 eq op6 jumpi 
      dup1 0x7 eq op7 jumpi 
      dup1 0x8 eq op8 jumpi 
      dup1 0xA eq opA jumpi 
      dup1 0xB eq opB jumpi 
      dup1 0xC eq opC jumpi 
      dup1 0xD eq opD jumpi 
      dup1 0xE eq opE jumpi 
      dup1 0xF eq opF jumpi 
      pop
      exitvmop jump
      op1: 
        OPCODE_CONST(mload,0x20)
        next jump
      op2:
        OPCODE_CONST(mload,0x40)
        next jump
      op3:
        OPCODE_CONST(mload,0x60)
        next jump
      op4:
        OPCODE_CONST(mload,0x80)
        next jump
      op5:
        OPCODE_CONST(mload,0xA0)
        next jump
      op6:
        OPCODE_CONST(mload,0xC0)
        next jump
      op7:
        OPCODE_CONST(mload,0xE0)
        next jump
      op8:
        pop
        0x0 mload
        dup1 mload
        swap1 0x20 swap1 sub 0x0 mstore
        0x1
        next jump

      opA:
        OPCODE(selfbalance)
        next jump
      opB:
        OPCODE(coinbase)
        next jump
      opC:
        OPCODE(timestamp)
        next jump
      opD:
        OPCODE(number)
        next jump
      opE:
        OPCODE(basefee)
        next jump
      opF:
        OPCODE(gasprice)
        next jump

      ops10:

      0x20 dup2 lt iszero ops20 jumpi

      dup1 0x11 eq op11 jumpi 
      dup1 0x12 eq op12 jumpi 
      dup1 0x13 eq op13 jumpi 
      dup1 0x14 eq op14 jumpi 
      dup1 0x15 eq op15 jumpi 
      dup1 0x16 eq op16 jumpi 
      dup1 0x17 eq op17 jumpi 
      dup1 0x18 eq op18 jumpi 
      dup1 0x19 eq op19 jumpi 
      dup1 0x1A eq op1A jumpi 
      dup1 0x1B eq op1B jumpi 
      dup1 0x1C eq op1C jumpi 
      dup1 0x1D eq op1D jumpi 
      dup1 0x1E eq op1E jumpi 
      dup1 0x1F eq op1F jumpi 
      pop
      exitvmop jump

      op11:
        OPCODE_STACK_TWO(add)
        next jump
      op12:
        OPCODE_STACK_TWO(sub)
        next jump
      op13:
        OPCODE_STACK_TWO(mul)
        next jump
      op14:
        OPCODE_STACK_TWO(div)
        next jump
      op15:
        OPCODE_STACK_TWO(sdiv)
        next jump
      op16:
        OPCODE_STACK_TWO(and)
        next jump
      op17:
        OPCODE_STACK_TWO(or)
        next jump
      op18:
        OPCODE_STACK_TWO(xor)
        next jump
      op19:
        OPCODE_STACK_ONE(not)
        next jump
      op1A:
        OPCODE_STACK_ARG8(shl)
        next jump
      op1B:
        OPCODE_STACK_ARG8(shr)
        next jump
      op1C:
        OPCODE_STACK_CONST(add, 0x1)
        next jump
      op1D:
        OPCODE_STACK_CONST(sub, 0x1)
        next jump
      op1E:
        OPCODE_STACK_TWO_REVERSE(sub)
        next jump
      op1F:
        OPCODE_STACK_TWO_REVERSE(div)
        next jump


    ops20:
      0x30 dup2 lt iszero ops30 jumpi


      dup1 0x20 eq op20 jumpi 
      dup1 0x21 eq op21 jumpi 
      dup1 0x22 eq op22 jumpi
      dup1 0x23 eq op23 jumpi
      dup1 0x24 eq op24 jumpi
      dup1 0x25 eq op25 jumpi
      dup1 0x26 eq op26 jumpi
      dup1 0x2A eq op2A jumpi
        pop
      exitvmop jump

      op20:
        pop // [offset]
        dup1 0x1 add //[offset]
        mload
        0x21
        next jump
      exitvmop jump

      op21: //BYTE
        OPCODE_LOAD_CONST(0x2, 0xFF)
        next jump
      op22: // WORD
        OPCODE_LOAD_CONST(0x3, 0xFFFF)
        next jump
      op23: // DWORD 32
        OPCODE_LOAD_CONST(0x5, 0xFFFFFFFF)
        next jump
      op23: // QDWORD 64
        OPCODE_LOAD_CONST(0x9, 0xFFFFFFFFFFFFFFFF)
        next jump
      op24: // 2QDWORD 112
        OPCODE_LOAD_CONST(0x7, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
        next jump
      op25: // 2QDWORD 128
        OPCODE_LOAD_CONST(0x9, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
        next jump
      op26: // 2QDWORD 160
        OPCODE_LOAD_CONST(0xD, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
        next jump
      op2A: // MUL -1 (NEG)
        OPCODE_STACK_CONST(mul, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
        next jump
    
    ops30:
      0x30 dup2 lt iszero ops40 jumpi
      //dup1 0x30 eq op30 jumpi 
      dup1 0x31 eq op31 jumpi 
      dup1 0x32 eq op32 jumpi
      dup1 0x33 eq op33 jumpi
      dup1 0x34 eq op34 jumpi
      dup1 0x35 eq op35 jumpi
      pop
      exitvmop jump

      op31: //BYTE
        OPCODE_CONST(and, 0xFF)
        next jump
      op32: // WORD
        OPCODE_CONST(and, 0xFFFF)
        next jump
      op33: // DWORD 32
        OPCODE_CONST(and, 0xFFFFFFFF)
        next jump
      op33: // QDWORD 64
        OPCODE_CONST(and, 0xFFFFFFFFFFFFFFFF)
        next jump
      op34: // 2QDWORD 112
        OPCODE_CONST(and, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
        next jump
      op35: // 2QDWORD 128
        OPCODE_CONST(and, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
        next jump
      op36: // 2QDWORD 160
        OPCODE_CONST(and, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
        next jump

  ops40:
      0x50 dup2 lt iszero ops50 jumpi
      dup1 0x40 eq op40 jumpi 
      dup1 0x41 eq op41 jumpi 
      dup1 0x42 eq op42 jumpi
      dup1 0x43 eq op43 jumpi
      dup1 0x44 eq op44 jumpi
      dup1 0x45 eq op45 jumpi
      dup1 0x46 eq op46 jumpi
      dup1 0x47 eq op47 jumpi
      dup1 0x48 eq op48 jumpi 
      dup1 0x49 eq op49 jumpi 
      dup1 0x4A eq op4A jumpi
      dup1 0x4B eq op4B jumpi
      dup1 0x4C eq op4C jumpi
      dup1 0x4D eq op4D jumpi
      dup1 0x4E eq op4E jumpi
      dup1 0x4F eq op4F jumpi
      pop
      exitvmop jump

      op40: 
        OPCODE_CMP_REVERT(eq, next)
        __RIGHTPAD(0x4551) //EQ
        0x2
        //dup1 0x0 mstore 0x20 0x0 revert
        PANIC()
      op41: 
        OPCODE_CMP_NOT_REVERT(eq, next)
        __RIGHTPAD(0x4E4551) //NEQ
        0x3
        PANIC()
      op42: 
        OPCODE_CMP_REVERT(lt, next)
        __RIGHTPAD(0x4C54) //LT
        0x2
        PANIC()
      op43: 
        OPCODE_CMP_NOT_REVERT(lt, next)
        __RIGHTPAD(0x475445) //GTE
        0x3
        PANIC()
      op44: 
        OPCODE_CMP_REVERT(gt, next)
        __RIGHTPAD(0x4754) // GT 
        0x2
        PANIC()
      op45: 
        OPCODE_CMP_NOT_REVERT(gt, next)
        __RIGHTPAD(0x4C5445) // LTE
        0x3
        PANIC()
      op46: 
        OPCODE_ISZERO_REVERT(next)
        __RIGHTPAD(0x5A52) // ZR
        0x2
        PANIC()
      op47: 
        OPCODE_ISZERO_NOT_REVERT(next)
        __RIGHTPAD(0x4E5A52) // NZR
        0x3
        PANIC()

      op48: 
        OPCODE_CMP_REVERT(eq, next)
        //0x4551 0x0 mstore // EQ
        0x0 0x0 mstore // EQ
        0x20 0x0 return
      op49: 
        OPCODE_CMP_NOT_REVERT(eq, next)
        //0x4E4551 0x0 mstore //NEQ
        0x0 0x0 mstore // EQ
        0x20 0x0 return
      op4A: 
        OPCODE_CMP_REVERT(lt, next)
        //0x4C54 0x0 mstore //LT
        0x0 0x0 mstore // EQ
        0x20 0x0 return
      op4B: 
        OPCODE_CMP_NOT_REVERT(lt, next)
        //0x4E5445 0x0 mstore //GTE
        0x0 0x0 mstore // EQ
        0x20 0x0 return
      op4C: 
        OPCODE_CMP_REVERT(gt, next)
        //0x4754 0x0 mstore // GT 
        0x0 0x0 mstore // EQ
        0x20 0x0 return
      op4D: 
        OPCODE_CMP_NOT_REVERT(gt, next)
        //0x4C5445 0x0 mstore // LTE
        0x0 0x0 mstore // EQ
        0x20 0x0 return
      op4E: 
        OPCODE_ISZERO_REVERT(next)
        //0x5A52 0x0 mstore // ZR
        0x0 0x0 mstore // ZR
        0x20 0x0 return
      op4F: 
        OPCODE_ISZERO_NOT_REVERT(next)
        //0x4E0A52 0x0 mstore // NZR
        0x0 0x0 mstore // NZR
        0x20 0x0 return

      exitvmop jump

  ops50:
      0x60 dup2 lt iszero ops60 jumpi
      dup1 0x50 eq op50 jumpi // SUM_POP
      dup1 0x51 eq op51 jumpi // SUM
      pop
      exitvmop jump
    op50: // SUM_POP
        pop // [offset, ..stack]
        dup1 0x1 add mload 0xF8 shr // [counter, offset, ..stack]
        dup1 0x5 shl
        0x0 mload // // [stack_offset, counter << 5, counter, offset, ..stack]
        sub dup1 0x0 mstore // [new_stack_offset]
        0x0
        op50_loop:
        swap1 0x20 add swap1  
        dup2 mload // [value, sum, new_stack_offset, counter]
        add // [sum, new_stack_offset, counter]
        swap2 0x1 swap1 sub swap2

        dup3 iszero iszero op50_loop jumpi
        swap2 
        pop 
        pop         
        0x2 
        next jump
    op51: // SUM_POP
        pop // [offset, ..stack]
        dup1 0x1 add mload 0xF8 shr // [counter, offset, ..stack]
        0x0 mload // // [stack_offset, counter, offset, ..stack]
        0x0
        op51_loop: //[sum, new_stack_offset, counter]
        dup2 mload // [value, sum, new_stack_offset, counter]
        add // [sum, new_stack_offset, counter]
        swap1 0x20 swap1 sub swap1  
        swap2 0x1 swap1 sub swap2

        dup3 iszero iszero op51_loop jumpi
        swap2 
        pop 
        pop         
        0x2 
        next jump
  ops60:

      pop
      exitvmop jump

    next:

      swap1
      swap2
      add
      start jump
    
    exitvmop:

      pop
      pop

}
