#include "Memory.huff"

// ABBCCC
// A 01234567
// 0 - rel mask
// 123 - vm stack word offset
// BB  byte data length
// CC memory data offset

#define macro SETUP_STACK() = takes(2) returns(0) {
        // [mask, data_offset]
        dup1 iszero exit_ss_no_need jumpi
        dup1 0xFFFFFF eq exit_ss_no_need jumpi
        swap1 // [data_offset, mask]
        dup2 0xFFF and add // [dst_offset_bytes, mask]
        dup2 0xC shr 0xFF and // [bytes_len, dst_offset_bytes, mask]
        dup1 iszero exit_ss_no_need2 jumpi

        swap1 // [dst_offset_bytes, bytes_len, mask]
        dup3 0x14 shr 0x7 and 0x5 shl 0x20 add // [stack_bytes + 20, dst_offset_bytes, bytes_len, mask]

        dup4 0x800000 and iszero norel jumpi

        0x20 swap1 sub // [stack_bytes, dst_offset_bytes, bytes_len, mask]
        0x0 mload sub // [stack_ptr - stack_bytes, dst_offset_bytes, bytes_len, mask]
    norel: // [stack_bytes, dst_offset_bytes, bytes_len, mask]

        swap1 // [dst_offset_bytes, stack_bytes, bytes_len]

        MEM_COPY()

        exit_ss jump
    exit_ss_no_need2: // [bytes_len, dst_offset_bytes, mask]
        pop // [dst_offset_bytes, mask]
    exit_ss_no_need: // [mask, data_offset]
        pop // [data_offset]
    exit_ss: // [data_offset]
        pop //[]
}

#define macro GET_STACK_WORD() = takes(1) returns(1) {
    //[mask]
    dup1 0x14 shr 0x7 and 0x5 shl 0x20 add // stack
    dup2 0x800000 and iszero norel jumpi

    0x20 swap1 sub
    0x0 mload
    sub 
    norel:

    mload
    swap1 
    pop 
}


#define macro CALC_RET_DATA_COPY_PARAMS() = takes(1) returns(3) {
        // [mask]
        dup1 0xFFF and  // [src_offset_bytes, mask]
        dup2 0xC shr 0xFF and // [src_bytes_len, src_offset_bytes, mask]
        swap1 // [src_offset_bytes, src_bytes_len,  mask]

        dup3 0x800000 and iszero norel_cr jumpi // [src_offset_bytes, src_bytes_len,  mask]
        0x0 mload // [stack_offset_bytes, src_offset_bytes, src_bytes_len,  mask]
        cnt_cr jump
    norel_cr:
        // [src_offset_bytes, src_bytes_len,  mask]
        dup3 0x14 shr 0x7 and 0x5 shl  // [stack_offset_bytes, src_offset_bytes, src_bytes_len,  mask]
    cnt_cr:
        // [stack_offset_bytes, src_offset_bytes, src_bytes_len,  mask]
        0x20 dup4 mod // [align, stack_offset_bytes, src_offset_bytes, src_bytes_len,  mask]
        dup4 dup2 add // [new_stack_offset, align, stack_offset_bytes, src_offset_bytes, src_bytes_len,  mask]
        0x0 mstore // // [align, stack_offset_bytes, src_offset_bytes, src_bytes_len,  mask]
        add
        0x20 add // [stack_offset_bytes, src_offset_bytes, src_bytes_len,  mask]
}

#define macro PUSH_CALL_RETURN() = takes(1) returns(0) {
        // [mask]
        dup1 iszero exit_cr jumpi
        dup1 0xFFFFFF eq exit_cr jumpi

        CALC_RET_DATA_COPY_PARAMS()

        returndatacopy

    exit_cr:
        pop
}